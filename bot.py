from aiogram import Dispatcher, Bot, executor, types
from config import TOKEN
import main
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
const = main.Constructor()


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(text="–Ø –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ë–æ—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ "
                              "–≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥ - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")


@dp.message_handler(commands=["help"])
async def show_commands(message: types.Message):
    commands = "<b>/to_ru</b> - <i>–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π</i>\n" \
               "<b>/to_en</b> - <i>–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π</i>\n" \
               "<b>/to_fr</b> - <i>–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π</i>\n" \
               "<b>/to_kz</b> - <i>–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π</i>"
    await message.reply(text=commands, parse_mode="html")


@dp.message_handler(commands=["to_ru"])
async def to_ru(msg: types.Message):
    text_to_trans = msg.reply_to_message.text
    res = "üá∑üá∫: " + const.text_translator(message=text_to_trans, to_lang="ru").text
    await msg.reply(text=res)


@dp.message_handler(commands=["to_en"])
async def to_ru(msg: types.Message):
    text_to_trans = msg.reply_to_message.text
    res = "üá∫üá∏: " + const.text_translator(message=text_to_trans, to_lang="en").text
    await msg.reply(text=res)


@dp.message_handler(commands=["to_kz"])
async def to_ru(msg: types.Message):
    text_to_trans = msg.reply_to_message.text
    res = "üá∞üáø: " + const.text_translator(message=text_to_trans, to_lang="kk").text
    await msg.reply(text=res)


@dp.message_handler(commands=["to_fr"])
async def to_ru(msg: types.Message):
    text_to_trans = msg.reply_to_message.text
    res = "üá´üá∑: " + const.text_translator(message=text_to_trans, to_lang="fr").text
    await msg.reply(text=res)


if __name__ == '__main__':
    executor.start_polling(dp)
